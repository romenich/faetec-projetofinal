package com.mycompany.sistemadecontas;

import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.sql.*;
import javax.swing.JOptionPane;

/**
 *
 * @author romenik
 */
public class TelaAtivos extends javax.swing.JFrame {

    private final DefaultTableModel tableModel;

    /**
     * Creates new form TelaAtivos
     */
    public TelaAtivos() {
        initComponents();

        // Inicialização do modelo da tabela
        tableModel = (DefaultTableModel) tabelaAtivos.getModel();

        // Configurar ouvinte para coluna "Circulante"
        TableColumn circulanteColumn = tabelaAtivos.getColumnModel().getColumn(2);
        circulanteColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JCheckBox()));
        circulanteColumn.getCellEditor().addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int row = tabelaAtivos.getSelectedRow();
                boolean circulanteValue = (boolean) tableModel.getValueAt(row, 2);
                boolean naoCirculanteValue = (boolean) tableModel.getValueAt(row, 3);

                if (circulanteValue) {
                    tableModel.setValueAt(false, row, 3); // Desmarca "Não Circulante"
                } else if (!circulanteValue && !naoCirculanteValue) {
                    tableModel.setValueAt(true, row, 3); // Marca "Não Circulante" se nenhum estiver marcado
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
                // Não é necessário fazer nada aqui, manter vazio
            }
        });
        // Configurar ouvinte para coluna "Não Circulante"
        TableColumn naoCirculanteColumn = tabelaAtivos.getColumnModel().getColumn(3);

        naoCirculanteColumn.setCellEditor(
                new javax.swing.DefaultCellEditor(new javax.swing.JCheckBox()));
        naoCirculanteColumn.getCellEditor()
                .addCellEditorListener(new CellEditorListener() {
                    @Override
                    public void editingStopped(ChangeEvent e
                    ) {
                        int row = tabelaAtivos.getSelectedRow();
                        boolean circulanteValue = (boolean) tableModel.getValueAt(row, 2);
                        boolean naoCirculanteValue = (boolean) tableModel.getValueAt(row, 3);

                        if (naoCirculanteValue) {
                            tableModel.setValueAt(false, row, 2); // Desmarca "Circulante"
                        } else if (!circulanteValue && !naoCirculanteValue) {
                            tableModel.setValueAt(true, row, 2); // Marca "Circulante" se nenhum estiver marcado
                        }
                    }

                    @Override
                    public void editingCanceled(ChangeEvent e
                    ) {
                        // Não é necessário fazer nada aqui, manter vazio
                    }

                });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoVoltar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAtivos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        botaoSalvarContas = new javax.swing.JButton();
        botaoMaisContas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ativos");
        setMaximumSize(new java.awt.Dimension(1093, 614));
        setPreferredSize(new java.awt.Dimension(1093, 614));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        botaoVoltar.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        botaoVoltar.setText("Voltar");
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });
        getContentPane().add(botaoVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 530, -1, -1));

        tabelaAtivos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        tabelaAtivos.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tabelaAtivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome da Conta", "Valor", "Circulante", "Não Circulante"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaAtivos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaAtivos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 900, 350));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Adicione as contas de Ativo da empresa");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        botaoSalvarContas.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        botaoSalvarContas.setText("Salvar Contas");
        botaoSalvarContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSalvarContasActionPerformed(evt);
            }
        });
        getContentPane().add(botaoSalvarContas, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 450, -1, -1));

        botaoMaisContas.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        botaoMaisContas.setText("Adicionar Mais Contas");
        botaoMaisContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMaisContasActionPerformed(evt);
            }
        });
        getContentPane().add(botaoMaisContas, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 450, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed
        // TODO add your handling code here:
        PainelBoasVindas newFrame = new PainelBoasVindas();
        newFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_botaoVoltarActionPerformed

    private void botaoSalvarContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSalvarContasActionPerformed

        String url = "jdbc:sqlite:contaativo.db";

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String nomeConta = (String) tableModel.getValueAt(i, 0);
            Double valor = (Double) tableModel.getValueAt(i, 1);
            Boolean circulante = (Boolean) tableModel.getValueAt(i, 2);
            Boolean naoCirculante = (Boolean) tableModel.getValueAt(i, 3);

            // Verificar se o nome da conta não está vazio (ou seja, se foi inserido)
            if (nomeConta != null && !nomeConta.trim().isEmpty()) {
                // Código para criar a tabela no banco de dados (só precisa ser executado uma vez)
                String createTableSQL = "CREATE TABLE IF NOT EXISTS contaAtivo (\n"
                        + "    idAtivo INTEGER PRIMARY KEY AUTOINCREMENT,\n"
                        + "    nomeConta TEXT NOT NULL,\n"
                        + "    valor REAL NOT NULL,\n"
                        + "    circulante INTEGER NOT NULL,\n"
                        + "    naoCirculante INTEGER NOT NULL\n"
                        + ");";

                try (Connection conn = DriverManager.getConnection(url); Statement stmt = conn.createStatement()) {
                    // Criando a tabela caso não exista (só será criada uma vez)
                    stmt.execute(createTableSQL);
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }

                // Código para inserir os dados no banco de dados
                String insertDataSQL = "INSERT INTO contaAtivo (nomeConta, valor, circulante, naoCirculante) VALUES (?, ?, ?, ?)";

                try (Connection conn = DriverManager.getConnection(url); PreparedStatement pstmt = conn.prepareStatement(insertDataSQL)) {
                    pstmt.setString(1, nomeConta);
                    pstmt.setDouble(2, valor);

                    // Verifica se a coluna "Circulante" está marcada
                    if (circulante != null && circulante) {
                        pstmt.setInt(3, 1); // 1 se verdadeiro
                    } else {
                        pstmt.setInt(3, 0); // 0 se falso ou não marcado
                    }

                    // Verifica se a coluna "Não Circulante" está marcada
                    if (naoCirculante != null && naoCirculante) {
                        pstmt.setInt(4, 1); // 1 se verdadeiro
                    } else {
                        pstmt.setInt(4, 0); // 0 se falso ou não marcado
                    }

                    // Execute a inserção
                    pstmt.executeUpdate();
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }

                // Exibir mensagem de sucesso para cada linha inserida
                JOptionPane.showMessageDialog(this, "Dados salvos com sucesso para a conta: " + nomeConta);
            }
        }
    }

    //método para calcular o total de ativos
    public double calcularTotalAtivos() {
        double totalAtivos = 0.0;
        String url = "jdbc:sqlite:contaativo.db";

        try (Connection conn = DriverManager.getConnection(url); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery("SELECT SUM(valor) AS total FROM contaAtivo")) {

            if (rs.next()) {
                totalAtivos = rs.getDouble("total");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return totalAtivos;
    }

//GEN-LAST:event_botaoSalvarContasActionPerformed

    private void botaoMaisContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMaisContasActionPerformed
        // TODO add your handling code here:
        TelaAtivos newFrame = new TelaAtivos();
        newFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_botaoMaisContasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaAtivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAtivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAtivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAtivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAtivos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoMaisContas;
    private javax.swing.JButton botaoSalvarContas;
    private javax.swing.JButton botaoVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaAtivos;
    // End of variables declaration//GEN-END:variables
}
